#!/usr/bin/env python3

'''
Start: ./httpserver -p 20200 -o 'cs5700cdnorigin.ccs.neu.edu:8080'
Testing: wget http://localhost:20200/
'''

import argparse
import datetime
from http.server import BaseHTTPRequestHandler
import socketserver
from typing import Tuple
import urllib.request
from utils import *
import os
import csv
from collections import OrderedDict
import time

MY_SERVER_NAME = 'cdn-http4.5700.network'
ORIGIN_SERVER = 'cs5700cdnorigin.ccs.neu.edu:8080'
DISK_SIZE_LIMIT = 20000000
ORDERED_CACHE_FILES = OrderedDict()


class ReplicaHTTPServer(BaseHTTPRequestHandler):
    """
    This class inherits from the BaseHTTPRequestHandler in the 'http.server' library and outlines logic for
    a GET request on the replica HTTP server.
    """

    def __init__(self, request: bytes, client_address: Tuple[str, int], server: socketserver.BaseServer):
        super().__init__(request, client_address, server)  # type: ignore

    def _send_information_over(self, response_code: int, data: bytes):
        """
        Helper method to send information to the client. Put this into a function because
        the contents of this function are used multiple times.

        Args:
            response_code: the response code to send over
            data: the response message to send over.
        """
        self.send_response(response_code)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(data)

    def do_GET(self):
        """
        This method is an override of the do_GET function specified in the BaseHTTPRequestHandler class.
        If the data we are looking for based on the path exists in our cache, then we send that data over. Otherwise,
        we send the data from the origin server.
        """

        filepath = self.path[1:]
        # send 204 if the path has "/grading/beacon"
        if filepath == 'grading/beacon':
            self._send_information_over(204, b'<html><body><h1>NO CONTENT.</h1></body></html>')
            return
        
        url_parts = self.path[1:].split('/')
        if url_parts[0] == 'rtt':
            src_ip = url_parts[1]
            if is_valid_ip(src_ip):
                rtt =  get_rtt(src_ip)
                self._send_information_over(200, str(rtt).encode('utf-8'))
            else:
                self._send_information_over(400, b'<html><body><h1>Invalid Request</h1></body></html>')
            return

        # if the file we're looking for exists in the disk cache, then pull the data
        # from there, otherwise go to the Origin server and pull the data from there.
        if f'{CACHE_DIRECTORY}/{filepath}' in ORDERED_CACHE_FILES:
            # open the file from the cache
            actual_file_content = ORDERED_CACHE_FILES[f'{CACHE_DIRECTORY}/{filepath}'][1]

            self._send_information_over(200, actual_file_content)

            # add the data to the cache
            size, file_content = ORDERED_CACHE_FILES.pop(f'{CACHE_DIRECTORY}/{filepath}')
            ORDERED_CACHE_FILES[f'{CACHE_DIRECTORY}/{filepath}'] = (size, file_content)

            # we change the file's "last modified" time, because when we
            # restart the server, we will need to sort the cache based on that time
            current_time = time.time()
            os.utime(f'{CACHE_DIRECTORY}/{filepath}', (current_time, current_time))
            return

        try:
            # actual path to the resource on the Origin server
            actual_resource_path = f'http://{ORIGIN_SERVER}/{filepath}'

            # contact the Origin server for the requested resource
            with urllib.request.urlopen(actual_resource_path) as response:
                # Extract the data from te origin server and the headers.
                data = response.read()
                headers = response.info()
                # send the data over
                self._send_information_over(response.status, data)

        except Exception as e:
            not_found_response = b"""
            <html>
                <body>
                    <h1>Unable to retrieve data from the origin server.
                        Please request for the resource again.
                    </h1>
                </body>
            </html>
            """
            self._send_information_over(404, not_found_response)
            return

        # exit if filepath is empty i.e, root / path.
        if not filepath:
            return

        # we need to cache the data that we just found from the origin server, but if the size of the
        # cache plus the new file size is greater than the disk size limit, we need to start removing items from the
        # head of the cache.
        while len(ORDERED_CACHE_FILES) > 0 \
                and int(sum(size for size, _ in ORDERED_CACHE_FILES.values())) + int(headers['Content-Length']) \
                > DISK_SIZE_LIMIT:
            # extract the least recently used file
            (file_to_remove_path, (size, file_content)) = ORDERED_CACHE_FILES.popitem(last=False)

            # delete that file
            delete_file(file_to_remove_path)

        # add the file to the cache.
        ORDERED_CACHE_FILES[f'{CACHE_DIRECTORY}/{filepath}'] = (int(headers['Content-Length']), data)

        # extract the directory path and the name of the file and make the directory.
        dir_path, file_name = os.path.split(filepath)
        mk_dir(f'{CACHE_DIRECTORY}/{dir_path}')

        # write the file to the cache.
        with open(f'{CACHE_DIRECTORY}/{filepath}', 'wb') as file:
            # Write the content of the file to the file we're creating and close the file out.
            file.write(data)
            file.close()

    def log_message(self, format, *args):
        print(datetime.datetime.now(), *args)
        return


@process_monitor
def main(server_port_number: int):
    """
    The entry point into the http server.
    Args:
        server_port_number: the port number this http server is listening/sending on
    """

    # load files into the cache based on how recently they were modified
    cached_files = find_recently_modified_files()

    for file in cached_files:
        ORDERED_CACHE_FILES[file[0]] = (file[1], file[2])

    with socketserver.TCPServer(('0.0.0.0', server_port_number), ReplicaHTTPServer) as httpd:
        print('Serving at port', server_port_number)
        httpd.serve_forever()


if __name__ == "__main__":
    # specify the port number and the origin server

    default_port = 20200
    default_origin_server = 'cs5700cdnorigin.ccs.neu.edu:8080'

    # Define the command line arguments
    parser = argparse.ArgumentParser(
        description='Determine HTTP Server arguments')
    parser.add_argument('-p', dest='port', action='store', type=int,
                        help='Port Number (default: %(default)s)', default=default_port)
    parser.add_argument('-o', dest='origin', action='store', type=str,
                        help='The Origin Server (default: %(default)s)', default=default_origin_server)

    # Parse the arguments
    args = parser.parse_args()

    # Set value for origin server
    ORIGIN_SERVER = args.origin

    # Call the main method with the specified port and origin
    main(args.port)
